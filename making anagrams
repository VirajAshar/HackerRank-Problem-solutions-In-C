#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

// Complete the makingAnagrams function below.
int makingAnagrams(char* s1, char* s2) {
    int del=0;
    int af[26] = {0};
    int bf[26] = {0};
    for(int i=0;i<strlen(s1);i++)
    {
        char current_char = s1[i];
        int char_to_int = (int)current_char;
        int position = char_to_int - 97;
        af[position]++;
    }
    for(int i=0;i<strlen(s2);i++)
    {
        char current_char = s2[i];
        int char_to_int = (int)current_char;
        int position = char_to_int - 97;
        bf[position]++;
    }
    for(int i=0;i<26;i++)
    {
        int diff = abs(af[i]-bf[i]);
        del += diff;
    }
    return del;



}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* s1 = readline();

    char* s2 = readline();

    int result = makingAnagrams(s1, s2);

    fprintf(fptr, "%d\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
